

# This file was *autogenerated* from the file LDPCcheck.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_10 = Integer(10); _sage_const_0p9 = RealNumber('0.9'); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_60 = Integer(60); _sage_const_1p = RealNumber('1.')#Controlliamo se l'algoritmo che ha pensato Paolo stima bene il numero di parole.
# Come codice di riferimento prendiamo un LDPC dal repertorio di McKay
reset()
load_attach_path('./utils/')
load('list_sorting.sage')
load('MacKay_utils.sage')
load('stern_utils.sage')

from sage.coding.reed_muller_code import QAryReedMullerCode

q = _sage_const_2 
Fq = GF(q)
Fq_star = [Fq(i) for i in range(_sage_const_1 ,q)];
inputFile = '495.62.3.2915'
n,m,H = readFromFile("./inputFiles/" + inputFile)
k = n-m
w = _sage_const_4 
p = _sage_const_2 
ell = _sage_const_6 

print(k)

# Set the confidence interval and the number of round
succ_pr = binomial(floor((k+ell)/_sage_const_2 ), p)*binomial(ceil((k+ell)/_sage_const_2 ), p)*binomial(n-k-ell,w-_sage_const_2 *p)/binomial(n,w)
confidence_interval = _sage_const_10  #number of errors we admit (percentage of N_C(w))
accuracy = _sage_const_0p9  #accuracy of the estimate
t= ceil(_sage_const_3  /  (confidence_interval**_sage_const_2  * succ_pr) * log(_sage_const_1 /(_sage_const_1 -accuracy)))
print("t: ", t)


avg_hat_N = _sage_const_0  #average number of solutions found
for num_attempt in range(t):
    print(num_attempt)
    X = stern_isd(H, Fq, Fq_star, n, k, p, ell, w) #Apply permutation and PGE
    avg_hat_N+=len(X)


Nw = _sage_const_60  # Number of codeword of weight 4
emp_Nw = avg_hat_N/(t*succ_pr)
th_Nw = Nw
print("Emp. = ",emp_Nw*_sage_const_1p ,", Th. = ", th_Nw*_sage_const_1p )

