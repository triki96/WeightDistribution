

# This file was *autogenerated* from the file Estimator2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_20 = Integer(20); _sage_const_10000 = Integer(10000); _sage_const_0 = Integer(0); _sage_const_1p = RealNumber('1.')#Vediamo come l'algoritmo che ha pensato Paolo migliora quello dei cinesi
reset()
load_attach_path('./utils/')
load('list_sorting.sage')
load('MacKay_utils.sage')
load('stern_utils.sage')

q = _sage_const_2 
Fq = GF(q)
Fq_star = [Fq(i) for i in range(_sage_const_1 ,q)];
inputFile = '495.62.3.2915'
#inputFile = '96.3.963'
n,m,H = readFromFile(inputFile)
k = n-m
w = _sage_const_4 
p = _sage_const_2 
ell = _sage_const_20 


# Set the confidence interval and the number of round
succ_pr = binomial(floor((k+ell)/_sage_const_2 ), p)*binomial(ceil((k+ell)/_sage_const_2 ), p)*binomial(n-k-ell,w-_sage_const_2 *p)/binomial(n,w)
t = _sage_const_10000 
p_star = _sage_const_0 
emp_Nw_old = _sage_const_0 
fileName = "./outputEstimator2/" + inputFile + "-" + str(w)
with open(fileName, "w") as f:
		f.write("Parameters" + "\n")
		f.write("Code ID: " + str(inputFile) + "\n")
		f.write("p: " + str(p) + " - k: " + str(k) + " - l: " + str(ell) + "\n")
f.close()

foundCodewords = Set([])
for num_attempt in range(_sage_const_1 ,t+_sage_const_1 ):
	with open(fileName, "a") as f:
		f.write(str(num_attempt) + "\n")
		X = stern_isd(H, Fq, Fq_star, n, k, p, ell, w) #Apply permutation and PGE
		#print("Cardinalità soluzioni trovate: ",len(X))
		for u in X: 
			foundCodewords = foundCodewords.union(Set([u.str()]))
		#print("Cardinalità nuovo insieme: ", foundCodewords.cardinality())
		p_star = (_sage_const_1  - (_sage_const_1 -succ_pr)**num_attempt)
		emp_Nw = foundCodewords.cardinality() / p_star
		f.write(" Estimate II: " + str(emp_Nw*_sage_const_1p ) + "\n")
		#print(" Estimate II: " + str(emp_Nw*1.))
	f.close()

